package org.lemurproject.mturkcastdata;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.StringJoiner;

import org.apache.commons.text.StringEscapeUtils;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.queryparser.classic.ParseException;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class CreateMTurkCastData {
	
	@Autowired
	private GlobalProperties properties;
	
    public void createData() throws IOException, ParseException{
		Map<String, String> queries = getQueries(); 
		List<Qrel> qrels = getQrels();
		
		Directory marcoDir = FSDirectory.open(Paths.get(properties.getMarcoIndex()));
		IndexReader marcoReader = DirectoryReader.open(marcoDir);
		IndexSearcher marcoSearcher = new IndexSearcher(marcoReader);
		
		Directory carDir = FSDirectory.open(Paths.get(properties.getCarIndex()));
		IndexReader carReader = DirectoryReader.open(carDir);
		IndexSearcher carSearcher = new IndexSearcher(carReader);

		BufferedWriter csvWriter = new BufferedWriter(new FileWriter("mturk_cast.csv"));
		
		QueryParser qp = new QueryParser("externalId", new StandardAnalyzer());
		
		for (Qrel qrel : qrels) {
			String docId = qrel.getDocId();
			StringJoiner docLine = new StringJoiner("\t ");
			Document doc = null;
			if (docId.startsWith("MARCO")) {
				String docNum = docId.substring(docId.indexOf("_")+1);
				Query query = qp.parse(docNum);
				TopDocs hitDocs = marcoSearcher.search(query, 1);
				ScoreDoc[] scoreDocs = hitDocs.scoreDocs;
				
				if (scoreDocs.length == 0) {
					System.out.println("No doc found MARCO " + docId);
				}

				for (ScoreDoc scoreDoc : scoreDocs) {
					int docid = scoreDoc.doc;
					doc = marcoSearcher.doc(docid);
					//System.out.println(doc.get("body"));
				}
			} else {
				String docNum = docId.substring(docId.indexOf("_")+1);
				Query query = qp.parse(docNum);
				TopDocs hitDocs = carSearcher.search(query, 1);
				ScoreDoc[] scoreDocs = hitDocs.scoreDocs;
				
				if (scoreDocs.length == 0) {
					System.out.println("No doc found CAR " + docId);
				}

				for (ScoreDoc scoreDoc : scoreDocs) {
					int docid = scoreDoc.doc;
					doc = carSearcher.doc(docid);
					//System.out.println(doc.get("body"));
				}
			}
			String queryText = getQueryText(queries, qrel.queryNum);
			docLine.add(queryText);
			String docText = doc.get("body");
			docText.replace("\t", "     ");
			docLine.add(docText);
			docLine.add(docId);
			docLine.add(qrel.getScore());
			csvWriter.write(docLine.toString());
			csvWriter.write("\n");
		}
		csvWriter.close();
	}

    private String getQueryText(Map<String, String> queries, String queryNum) {
    	String[] queryNums = queryNum.split("_");
    	String firstQueryNum = queryNums[0];
    	int secondQueryNum = Integer.valueOf(queryNums[1]).intValue();
    	
    	StringJoiner queryBuffer = new StringJoiner("<br/>");
    	
    	queries.forEach((queryName, query) -> {
    		if (queryName.startsWith(firstQueryNum)) {
    			if (Integer.valueOf(queryName.substring(queryName.indexOf("_")+1)).intValue() <= secondQueryNum) {
    				queryBuffer.add(query);
    			}
    		}
    	});
    	return queryBuffer.toString();
    }

	public Map<String, String> getQueries() throws FileNotFoundException {
		Map<String, String> queries = new HashMap<String, String>();

		Scanner scanner = new Scanner(new File(properties.getQueries()));
		while (scanner.hasNextLine()) {
			String line = scanner.nextLine();
			String[] lineParts = line.split("\t");
			int splitIndex = lineParts[1].indexOf(' ');
			String queryNum = lineParts[1].substring(0, splitIndex);
			String queryText = lineParts[1].substring(splitIndex).trim();

			queries.put(queryNum, queryText);
		}
		scanner.close();
		return queries;
	}

	public List<Qrel> getQrels() throws FileNotFoundException {
		List<Qrel> qrels = new ArrayList<CreateMTurkCastData.Qrel>();

		Scanner scanner = new Scanner(new File(properties.getQrels()));
		while (scanner.hasNextLine()) {
			String line = scanner.nextLine();
			String[] lineParts = line.split(" ");
			if (lineParts[2].startsWith("MARCO")) {
				Qrel qrel = new Qrel();
				qrel.setDocId(lineParts[2]);
				qrel.setQueryNum(lineParts[0]);
				qrel.setScore(lineParts[3]);

				qrels.add(qrel);
			}
		}
		scanner.close();
		return qrels;
	}
	
	public class Query {
		private String queryNum;
		private String queryText;
	}
	
	public class Qrel {
		private String queryNum;
		private String docId;
		private String score;

		public String getQueryNum() {
			return queryNum;
		}

		public void setQueryNum(String queryNum) {
			this.queryNum = queryNum;
		}

		public String getDocId() {
			return docId;
		}

		public void setDocId(String docId) {
			this.docId = docId;
		}

		public String getScore() {
			return score;
		}

		public void setScore(String score) {
			this.score = score;
		}

		@Override
		public String toString() {
			return String.join(" ", queryNum, docId, score);
		}

	}
	
}
